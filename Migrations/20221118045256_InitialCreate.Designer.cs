// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ResultsNet.Data;

#nullable disable

namespace ResultsNet.Migrations
{
    [DbContext(typeof(ResultsDBContext))]
    [Migration("20221118045256_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ResultsNet.Entities.Career", b =>
                {
                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CareerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("(now())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.HasKey("user_id", "CareerId");

                    b.ToTable("career");
                });

            modelBuilder.Entity("ResultsNet.Entities.Competition", b =>
                {
                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CompetitionId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("Concluded")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("(now())");

                    b.Property<string>("FormatName")
                        .HasColumnType("varchar(32)");

                    b.Property<bool>("Minimized")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("StartAt")
                        .HasColumnType("int");

                    b.HasKey("user_id", "CompetitionId");

                    b.HasIndex("user_id", "SeasonId");

                    b.ToTable("competition");
                });

            modelBuilder.Entity("ResultsNet.Entities.CompetitionFormat", b =>
                {
                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Position")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Output")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.HasKey("user_id", "Name", "Position");

                    b.ToTable("competition_format");
                });

            modelBuilder.Entity("ResultsNet.Entities.Result", b =>
                {
                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ResultId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CompetitionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("(now())");

                    b.Property<sbyte>("GoalsAgaints")
                        .HasColumnType("tinyint(255)");

                    b.Property<sbyte>("GoalsFor")
                        .HasColumnType("tinyint(255)");

                    b.Property<bool>("Home")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OppTeam")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<sbyte>("Position")
                        .HasColumnType("tinyint(255)");

                    b.Property<bool>("Replay")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("user_id", "ResultId");

                    b.HasIndex("user_id", "CompetitionId");

                    b.ToTable("result");
                });

            modelBuilder.Entity("ResultsNet.Entities.Season", b =>
                {
                    b.Property<Guid>("user_id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CareerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("(now())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.HasKey("user_id", "SeasonId");

                    b.HasIndex("user_id", "CareerId");

                    b.ToTable("season");
                });

            modelBuilder.Entity("ResultsNet.Entities.User", b =>
                {
                    b.Property<Guid>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValueSql("(now())");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("blob(64)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("blob(128)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.HasKey("user_id");

                    b.HasAlternateKey("Username");

                    b.ToTable("user");
                });

            modelBuilder.Entity("ResultsNet.Entities.Career", b =>
                {
                    b.HasOne("ResultsNet.Entities.User", "user")
                        .WithMany("careers")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("ResultsNet.Entities.Competition", b =>
                {
                    b.HasOne("ResultsNet.Entities.Season", "season")
                        .WithMany("competitions")
                        .HasForeignKey("user_id", "SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("season");
                });

            modelBuilder.Entity("ResultsNet.Entities.CompetitionFormat", b =>
                {
                    b.HasOne("ResultsNet.Entities.User", "user")
                        .WithMany("competitionFormats")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("ResultsNet.Entities.Result", b =>
                {
                    b.HasOne("ResultsNet.Entities.Competition", "competition")
                        .WithMany("results")
                        .HasForeignKey("user_id", "CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("competition");
                });

            modelBuilder.Entity("ResultsNet.Entities.Season", b =>
                {
                    b.HasOne("ResultsNet.Entities.Career", "career")
                        .WithMany("seasons")
                        .HasForeignKey("user_id", "CareerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("career");
                });

            modelBuilder.Entity("ResultsNet.Entities.Career", b =>
                {
                    b.Navigation("seasons");
                });

            modelBuilder.Entity("ResultsNet.Entities.Competition", b =>
                {
                    b.Navigation("results");
                });

            modelBuilder.Entity("ResultsNet.Entities.Season", b =>
                {
                    b.Navigation("competitions");
                });

            modelBuilder.Entity("ResultsNet.Entities.User", b =>
                {
                    b.Navigation("careers");

                    b.Navigation("competitionFormats");
                });
#pragma warning restore 612, 618
        }
    }
}
